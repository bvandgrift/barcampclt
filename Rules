#!/usr/bin/env ruby

# ----------------------------------------------------------------------
# compass setup
# requires the compass gem and makes sure it uses the correct config file
# ----------------------------------------------------------------------
require 'compass'
Compass.add_project_configuration('compass.rb')      # for Compass 0.10
#Compass.configuration.parse 'compass.rb'            # for Compass < 0.10

# quick abrstraction so you don't have to redeclare
# haml formatting for each new barcamp site
HAML_OPTIONS = {
  :escape_html => false,
  :ugly => false,
  :format => :html5
}

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# ----------------------------------------------------------------------
# preprocess
# handy rule to pre process items from the site before the compile/route
# pieces run.
# ----------------------------------------------------------------------
preprocess do
  # unpublish items by setting meta attribute publish: false
  items.delete_if { |item| item[:publish] == false }

  copy_assets
end

# ----------------------------------------------------------------------
# compile & route files without generating an extra directory
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# robots.txt & humans.txt files
# ----------------------------------------------------------------------
compile 'humans' do
  layout 'plaintext'
end
route 'humans' do
  item.identifier.chop + '.txt'
end

compile 'robots' do
  layout 'plaintext'
end
route 'robots' do
  item.identifier.chop + '.txt'
end

# ----------------------------------------------------------------------
# previous years stylesheets
# BarCamp IV, V
# ----------------------------------------------------------------------
# IV
compile '/assets/stylesheets/iv/*/' do
    filter :sass, Compass.sass_engine_options
end
route '/assets/stylesheets/iv/*/' do
    item.identifier.chop + '.css'
end

# V
compile '/assets/stylesheets/v/_*/' do
end
route '/assets/stylesheets/v/_*/' do
    nil
end

compile '/assets/stylesheets/v/*/' do
    filter :sass, Compass.sass_engine_options
end
route '/assets/stylesheets/v/*/' do
    item.identifier.chop + '.css'
end

# ----------------------------------------------------------------------
# stylesheets
# compiles the sass or scss files using the sass engine then takes the 
# sass or scss, rips off the extention and changes it to .css
# ----------------------------------------------------------------------
compile '/assets/stylesheets/_*/' do
    # don’t compile partials
end

route '/assets/stylesheets/_*/' do
    # don't output partials
    nil
end

compile '/assets/stylesheets/*/' do
    filter :sass, Compass.sass_engine_options
end

route '/assets/stylesheets/*/' do
    # prevents nanoc from generating a directory for each css file
    item.identifier.chop + '.css'
end

# ----------------------------------------------------------------------
# previous content
# BarCamp IV, V
# ----------------------------------------------------------------------
compile 'iv/*' do
  # item[:extension] returns 'html.erb' for multi-dotted filename
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last
  
  if ext == 'erb'
    filter :erb
  elsif ext == 'haml' || ext.nil?
    filter :haml, HAML_OPTIONS
  elsif ext == 'md' || ext == 'markdown'
    filter :erb
    filter :bluecloth
  else
    raise "Filter is not configured for #{item.identifier} in Rules file."
  end
  
  layout '_iv/default' unless item[:layout] == "none"
end

compile 'v/*' do
  # item[:extension] returns 'html.erb' for multi-dotted filename
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last
  
  if ext == 'erb'
    filter :erb
  elsif ext == 'haml' || ext.nil?
    filter :haml, HAML_OPTIONS
  elsif ext == 'md' || ext == 'markdown'
    filter :erb
    filter :bluecloth
  else
    raise "Filter is not configured for #{item.identifier} in Rules file."
  end
  
  layout '_v/default' unless item[:layout] == "none"
end

# ----------------------------------------------------------------------
# content
# filters and compiles the haml content then takes the content
# files and changes the extention to .html
# ----------------------------------------------------------------------
compile '*' do
    #filter :haml
    #layout 'default'
    # gets the extension of each item so we can run some basic logic
    # and apply the correct filter
    ext = item[:extension].nil? ? nil : item[:extension].split('.').last
    
    if ext == 'erb'
        filter :erb
    elsif ext == 'haml' || ext.nil?
        filter :haml
    elsif ext == 'md' || ext == 'markdown'
        filter :erb
        filter :bluecloth
    elsif ext == 'html'

    elsif ext == 'txt'

    else
        raise "Filter is not configured for #{item.identifier} in Rules file."
    end
    
    layout 'default' unless item[:layout] == "none"
end

route '*' do
  item.identifier + 'index.html'
end

# ----------------------------------------------------------------------
# layout
# universal rule to format haml content as HTML5 and set some formatting
# options to Haml outputs pretty html. For production you can set
# ':ugly' to 'true'.
# ----------------------------------------------------------------------
layout '*', :haml, :format => :html5, :ugly => false, :escape_html => false
